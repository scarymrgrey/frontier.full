#
# CORE
# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.
#
''' Sample user-defined service.
'''

import os

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class IPerfSink(CoreService):
    ''' This is a sample user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "IPerfSink"
    # you can create your own group here
    _group = "SEEP"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ()
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('iperf-sink.sh',)
    # this controls the starting order vs other enabled services
    _startindex = 53 
    #_starttime="10"
    # list of startup commands, also may be generated during startup
    _startup = ('sh iperf-sink.sh',)
    # list of shutdown commands
    _shutdown = ()


    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        
        if filename is 'shutdown.sh':
            cfg = "#!/bin/sh\n"
            cfg += "# auto-generated by IPerfSink\n"
            return cfg
        else:
            repo_dir = "%s/../../../../../.."%os.path.dirname(os.path.realpath(__file__))
            seep_example_dir = "%s/seep-system/examples/acita_demo_2015"%repo_dir

            cfg = "#!/bin/sh\n"
            cfg += "# auto-generated by IPerfSink\n"
            cfg += "cp %s/core-emane/vldb/config/run-iperf-sink.sh .\n"%(seep_example_dir)
            cfg += "cp %s/core-emane/vldb/config/run_iperf_sink.py .\n"%(seep_example_dir)
            cfg += 'echo "Starting iperf sink."\n'
            cfg += 'ip route\n'
            cfg += '/sbin/route\n'
            cfg += 'ifconfig\n'
            #cfg += "./run-iperf-sink.sh >iperf-sink.log 2>&1\n"
            cfg += "./run_iperf_sink.py --node n%d >iperf-sink.log 2>&1\n"%node.objid
            cfg += 'echo "iperf sink finished."\n'
            return cfg

# this line is required to add the above class to the list of available services
addservice(IPerfSink)

